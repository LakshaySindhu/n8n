{
  "name": "JSON in depth",
  "nodes": [
    {
      "parameters": {},
      "id": "226fc9ea-5a3d-4e67-be75-a791c4acc127",
      "name": "Execute to Start",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        224,
        480
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "={\n  \"my_field_1\": \"value\",\n  \"my_field_2\": 1\n}\n ",
        "options": {}
      },
      "id": "e43975f1-9e2f-4fac-926a-cd9f5ed8e479",
      "name": "String",
      "type": "n8n-nodes-base.set",
      "position": [
        848,
        480
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "2dd91754-9a59-40dd-a91d-15b42a3ec025",
              "name": "key",
              "value": "value",
              "type": "string"
            },
            {
              "id": "a4391934-272b-43d9-bb59-edbb1ddd655a",
              "name": "another_key",
              "value": "another_value",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "98f0497a-f275-48f6-9ab3-593c95597d3d",
      "name": "Key & Value",
      "type": "n8n-nodes-base.set",
      "position": [
        560,
        480
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5c8e34fc-99c7-421d-b7d3-287e0410e409",
              "name": "json_example_integer",
              "value": null,
              "type": "number"
            },
            {
              "id": "9da6ca95-6dae-4405-8d3f-69626c20f0cb",
              "name": "json_example_float",
              "value": "12.5",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "2f820f67-3092-4df4-9172-ffd558cfd96e",
      "name": "Number",
      "type": "n8n-nodes-base.set",
      "position": [
        1120,
        480
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e87952cb-878e-4feb-8261-342eaf887838",
              "name": "json_example_boolean",
              "type": "boolean",
              "value": false
            }
          ]
        },
        "options": {}
      },
      "id": "f5a73a52-9b1c-43dc-a153-86178b0b215e",
      "name": "Boolean",
      "type": "n8n-nodes-base.set",
      "position": [
        1408,
        480
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e87952cb-878e-4feb-8261-342eaf887838",
              "name": "json_example_array",
              "type": "array",
              "value": "[\"first element\", 2, false, null]"
            }
          ]
        },
        "options": {}
      },
      "id": "35ee9c6e-4ae6-4bd0-8cc0-7d38ea97e40c",
      "name": "Array",
      "type": "n8n-nodes-base.set",
      "position": [
        1968,
        480
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e87952cb-878e-4feb-8261-342eaf887838",
              "name": "json_example_object",
              "type": "object",
              "value": "{\"key\":\"value\",\"array\":[1,2,3],\"boolean\":false,\"integer\":123,\"sub_object\":{\"sub_key\":\"Find me!\"}}"
            }
          ]
        },
        "options": {}
      },
      "id": "8422820b-ffc4-4e50-9279-258a0a3d719a",
      "name": "Object",
      "type": "n8n-nodes-base.set",
      "position": [
        2240,
        480
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "content": "## Tutorial - What is JSON?\n\nWelcome! This workflow will teach you the basics of JSON, the language that apps and n8n nodes use to exchange information.\n\n**What is JSON?**\nImagine a contact card:\n- **Name:** John Doe\n- **Age:** 30\n- **Has Children:** Yes\n- **Phone Numbers:** [\"555-1234\", \"555-5678\"]\n\n\nJSON is just a way of writing this down so a computer can understand it perfectly.\n\n**How to use this tutorial:**\n1.  Click **\"Execute Workflow\"**.\n2.  Click on each node, one by one, in order.\n3.  Look at the node's output in the panel on the right and read the associated sticky note to understand what's happening.",
        "height": 640,
        "width": 460
      },
      "id": "5d8d850d-2b1d-44ee-a9c8-1df06a0ab64e",
      "name": "Sticky Note",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        0
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "#### The Heart of JSON: Key & Value\n\nEverything in JSON is built on this pair:\n- A **Key** (the name of the data, always in double quotes `\"`).\n- A **Value** (the data itself).\n\n\n`\"key\": \"value\"`\n\nIn this node's output, you see two key/value pairs. This is the basic building block for everything that follows.",
        "height": 500,
        "width": 260,
        "color": 7
      },
      "id": "655f75f5-a07d-4f74-ae44-bf8dc514446b",
      "name": "Sticky Note1",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        480,
        144
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "#### Data Type: String\n\nA string is simply **text**.\n- **Syntax:** The text is always enclosed in double quotes `\" \"`.\n\n\nLook at the output: the value of `json_example_string` is the text we defined.",
        "height": 500,
        "width": 260,
        "color": 7
      },
      "id": "43249251-926f-4aa7-8f80-f16d778b3761",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        768,
        144
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "#### Data Type: Number\n\nThis is simply a number. It can be a whole number (integer) like 10, or a decimal (float) like 12.5.\n- **Syntax:** Just write the number directly, **WITHOUT quotes**.\n\n\n`\"age\": 30` (Correct)\n`\"age\": \"30\"` (Incorrect, this is a String!)\n\nThis distinction is crucial for doing math!",
        "height": 500,
        "width": 260,
        "color": 7
      },
      "id": "8b53b2d8-07bf-442c-8a63-2268f25b1063",
      "name": "Sticky Note3",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1040,
        144
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "#### Data Type: Boolean\n\nThis is a value that can only be **TRUE** or **FALSE**.\n- **Syntax:** `true` or `false` (always lowercase and **WITHOUT quotes**).\n\n\nThink of it like a light switch: on (`true`) or off (`false`). It's very useful for conditions (If/Then logic).",
        "height": 500,
        "width": 260,
        "color": 7
      },
      "id": "4da1618c-3a21-4bde-a464-efd550cbe764",
      "name": "Sticky Note4",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1328,
        144
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "#### Data Type: Array\n\nAn array is an **ordered list** of items.\n- **Syntax:** Starts with `[` and ends with `]`. Items are separated by commas.\n\n\nAn array can hold anything: strings, numbers, booleans, and even other arrays or objects!",
        "height": 500,
        "width": 260,
        "color": 7
      },
      "id": "4c497e50-0eb8-4a88-904b-8b60a97faf77",
      "name": "Sticky Note5",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1888,
        144
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "#### Data Type: Object (JSON Object)\n\nThis is the main concept! An object is a **collection of key/value pairs**.\n- **Syntax:** Starts with `{` and ends with `}`.\n\n\nThis is what allows us to structure complex data, like our contact card from the beginning. Notice how this object contains all the other data types we've seen!",
        "height": 500,
        "width": 280,
        "color": 7
      },
      "id": "4cb1368d-ad69-45dc-b9d7-48feca23eb5d",
      "name": "Sticky Note6",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2160,
        144
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e87952cb-878e-4feb-8261-342eaf887838",
              "name": "json_example_null",
              "type": "null",
              "value": null
            }
          ]
        },
        "options": {}
      },
      "id": "3d70944b-304c-46ad-92e5-20bd4a528077",
      "name": "Null",
      "type": "n8n-nodes-base.set",
      "position": [
        1680,
        480
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "content": "#### Data Type: Null\n\nThis special type means \"nothing,\" \"no value,\" or \"empty.\"\n- **Syntax:** `null` (lowercase and **WITHOUT quotes**).\n\n\nIt's different from `0` (which is a number) or `\"\"` (which is an empty string). `null` is the intentional absence of a value.",
        "height": 500,
        "width": 260,
        "color": 7
      },
      "id": "7de864f6-95b1-4f0c-9be1-8d113decf1c6",
      "name": "Sticky Note7",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1600,
        144
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e87952cb-878e-4feb-8261-342eaf887838",
              "name": "message",
              "type": "string",
              "value": "=Hello, the number from the tutorial is: {{ $('Number').item.json.json_example_integer }}"
            },
            {
              "id": "61f385f4-b8e2-4c69-b873-9ffc3ab3fe94",
              "name": "sub_key",
              "type": "string",
              "value": "={{ $json.json_example_object.sub_object.sub_key }}"
            },
            {
              "id": "bd752a0f-64bf-44b1-b39b-fca28e86aa5b",
              "name": "array_second_item",
              "type": "string",
              "value": "={{ $json.json_example_object.array[1] }}"
            },
            {
              "id": "51edfc83-8150-4507-a3d2-2319ae0e70d7",
              "name": "String_value",
              "value": "=[\"{{ $('String').item.json.my_field_1 }}\" , \"{{ $('Key & Value').item.json.another_key }}\"]",
              "type": "array"
            },
            {
              "id": "ff4cb496-038c-4e39-83f2-936b672074b1",
              "name": "name_of_user",
              "value": "mayank",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "204c02c8-477e-4906-a01b-95c6717c7653",
      "name": "Using JSON (Expressions)",
      "type": "n8n-nodes-base.set",
      "position": [
        2592,
        480
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "content": "#### ⭐ THE KEY STEP: Using JSON in n8n!\n\nNow for the magic. How do you use data from a previous node? With **expressions** `{{ }}`.\n\nThis node creates a custom message. Look at the value of the `message` field:\n`Hello, the number from the tutorial is: {{ $('Number').item.json.json_example_integer }}`\n\nIt dynamically pulled the number `10` from the \"Number\" node! This is how you make your nodes talk to each other.",
        "height": 500,
        "width": 340,
        "color": 5
      },
      "id": "2550ac8c-3dba-4eae-96e5-bb0bd83a52cf",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2464,
        144
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "e87952cb-878e-4feb-8261-342eaf887838",
              "name": "summary_string",
              "type": "string",
              "value": "={{ $('String').item.json.my_field_1 }}"
            },
            {
              "id": "12345",
              "name": "summary_number",
              "type": "number",
              "value": "={{ $('Number').item.json.json_example_integer }}"
            },
            {
              "id": "67890",
              "name": "summary_boolean",
              "type": "boolean",
              "value": "={{ $('Boolean').item.json.json_example_boolean }}"
            },
            {
              "id": "abcde",
              "name": "summary_null",
              "type": "null",
              "value": "={{ $('Null').item.json.json_example_null }}"
            },
            {
              "id": "fghij",
              "name": "summary_array",
              "type": "array",
              "value": "={{ $('Array').item.json.json_example_array }}"
            },
            {
              "id": "klmno",
              "name": "summary_object",
              "type": "object",
              "value": "={{ $('Object').item.json.json_example_object }}"
            }
          ]
        },
        "options": {}
      },
      "id": "91955652-9239-4ba7-b1ba-cdbc1a9bc5de",
      "name": "Final Exam",
      "type": "n8n-nodes-base.set",
      "position": [
        2944,
        480
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "content": "#### 🎓 FINAL EXAM: Putting It All Together\n\nThis last node creates a final object by using expressions to pull data from **all the previous nodes**.\n\nClick on this node and look at the expressions in each field. It's a perfect summary of everything you've learned.\n\n**Congratulations! You now understand the basics of JSON and how to use it in n8n.**",
        "height": 500,
        "width": 340,
        "color": 6
      },
      "id": "4b81bdee-0a74-4a47-a661-dce3172c9340",
      "name": "Sticky Note9",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        2832,
        144
      ],
      "typeVersion": 1
    }
  ],
  "pinData": {
    "Key & Value": [
      {
        "json": {
          "key": "value",
          "another_key": "another_value"
        }
      }
    ]
  },
  "connections": {
    "Null": {
      "main": [
        [
          {
            "node": "Array",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Array": {
      "main": [
        [
          {
            "node": "Object",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Number": {
      "main": [
        [
          {
            "node": "Boolean",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Object": {
      "main": [
        [
          {
            "node": "Using JSON (Expressions)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "String": {
      "main": [
        [
          {
            "node": "Number",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Boolean": {
      "main": [
        [
          {
            "node": "Null",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Key & Value": {
      "main": [
        [
          {
            "node": "String",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute to Start": {
      "main": [
        [
          {
            "node": "Key & Value",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Using JSON (Expressions)": {
      "main": [
        [
          {
            "node": "Final Exam",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "205b56c3-a066-4064-a38f-1bc05807da41",
  "meta": {
    "instanceId": "5eb32f940e5aa1e6cc5a15b962ef59186c711434746b1e6835bc7518afd86f4a"
  },
  "id": "NDnfBepNNmbSB3aq",
  "tags": [
    {
      "createdAt": "2025-07-29T15:23:34.230Z",
      "updatedAt": "2025-07-29T15:23:34.230Z",
      "id": "OodnGQA68ZwZmykp",
      "name": "learnn8n"
    }
  ]
}